// vite.config.js
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/vite/dist/node/index.js";
import vue from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import AutoImport from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/unplugin-vue-components/dist/vite.js";
import { ElementPlusResolver } from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/unplugin-vue-components/dist/resolvers.js";
import { createSvgIconsPlugin } from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import path from "path";

// mock/router/user.js
import Mock from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/mockjs/dist/mock.js";
var mockUser = {
  id: "@id()",
  //得到随机的id
  name: "@cname()",
  //随机的用户名
  date: "@date()",
  //随机生成日期
  avatar: "@image('200x200', '#000000', '#fff', 'avatar')",
  //生成图片
  email: "@email()",
  //得到随机的id,对象
  role: "admin"
};
var tempData = Mock.mock({ "data|10": [mockUser] });
function userList() {
  return {
    code: 200,
    data: tempData.data,
    msg: "\u8BF7\u6C42\u6210\u529F"
  };
}
function add(data) {
  const internalData = Mock.mock({ id: "@id()", ...data });
  tempData.data.push(internalData);
  return {
    code: 200,
    data: tempData.data,
    msg: "\u65B0\u589E\u6210\u529F"
  };
}
function edit(data) {
  tempData.data.map((item) => {
    if (item.id === data.id) {
      item = { ...data };
    }
  });
  return {
    code: 200,
    data: tempData.data,
    msg: "\u4FEE\u6539\u6210\u529F"
  };
}
function del(data) {
  const indexToRemove = tempData.data.findIndex((item) => item.id === data.id);
  if (indexToRemove !== -1) {
    tempData.data.splice(indexToRemove, 1);
    return {
      code: 200,
      data: tempData.data,
      msg: "\u5220\u9664\u6210\u529F"
    };
  }
}
var handle = {
  "GET": userList,
  "POST": add,
  "PUT": edit,
  "DELETE": del
};
function user(obj) {
  return handle[obj.method]();
}
function userInfo() {
  return {
    code: 200,
    data: {
      name: "\u5F20\u8D5E",
      age: 16,
      sex: 1,
      role: ["admin"]
    }
  };
}
var user_default = {
  "/user": user,
  "/userInfo": userInfo
};

// mock/router/role.js
import Mock2 from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/mockjs/dist/mock.js";
var mockRole = {
  id: "@id()",
  role: "@role()",
  btn: ["1", "2", "3"]
};
var tempData2 = Mock2.mock({ "data|2": [mockRole] });
function roleList() {
  return {
    code: 200,
    data: tempData2.data,
    msg: "\u8BF7\u6C42\u6210\u529F"
  };
}
var role_default = {
  "/role": roleList
};

// mock/router/menu.js
import Mock3 from "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/node_modules/mockjs/dist/mock.js";
var mockRole2 = {
  id: "@id()",
  role: "@role()",
  btn: ["1", "2", "3"]
};
var tempData3 = Mock3.mock({ "data|2": [mockRole2] });
function roleList2() {
  return {
    code: 200,
    data: tempData3.data,
    msg: "\u8BF7\u6C42\u6210\u529F"
  };
}
function menu() {
  return {
    code: 200,
    data: [
      {
        id: "1",
        name: "system",
        path: "/system",
        meta: {
          icon: "audits",
          name: "\u7CFB\u7EDF\u7BA1\u7406"
        },
        children: [
          {
            id: "1-1",
            name: "user",
            path: "/system/user",
            meta: {
              icon: "audits",
              name: "\u7528\u6237\u7BA1\u7406"
            }
          },
          {
            id: "1-2",
            name: "role",
            path: "/system/role",
            meta: {
              icon: "audits",
              name: "\u89D2\u8272\u7BA1\u7406"
            }
          },
          {
            id: "1-3",
            name: "menu",
            path: "/system/menu",
            meta: {
              icon: "audits",
              name: "\u83DC\u5355\u7BA1\u7406"
            }
          }
        ]
      },
      {
        id: "2",
        path: "/component",
        name: "component",
        meta: {
          icon: "audits",
          name: "\u7EC4\u4EF6\u7BA1\u7406"
        },
        children: [
          {
            id: "2-1",
            name: "icon",
            path: "/components/icon",
            meta: {
              icon: "audits",
              name: "\u56FE\u6807\u7BA1\u7406"
            }
          },
          {
            id: "2-2",
            name: "table",
            path: "/components/table",
            meta: {
              icon: "audits",
              name: "\u8868\u683C\u7BA1\u7406"
            }
          }
        ]
      }
    ],
    msg: "\u8BF7\u6C42\u6210\u529F"
  };
}
var menu_default = {
  "/menu": roleList2,
  "/routes": menu
};

// mock/router/login.js
function login(data) {
  if (!data.body) {
    return { code: 400, msg: "\u8BF7\u6C42\u53C2\u6570\u9519\u8BEF" };
  }
  const { username, password } = data.body;
  console.log(username, password);
  return {
    code: 200,
    data: { token: "admin" },
    msg: "\u8BF7\u6C42\u6210\u529F"
  };
}
var login_default = {
  "/login": login
};

// mock/router/index.js
var router_default = {
  ...user_default,
  ...role_default,
  ...menu_default,
  ...login_default
};

// mock/index.js
var mock_default = () => {
  return {
    configureServer(server) {
      server.middlewares.use(bodyParse());
      server.middlewares.use((req, res, next) => {
        if (req.url.startsWith("/mock")) {
          req.query = parseQuery(req._parsedUrl.query);
          if (req.body) {
            req.body = JSON.parse(req.body);
          }
          res.writeHead(200, { "Content-Type": "application/json" });
          const url = req._parsedUrl.pathname.replace("/mock", "");
          if (router_default[url] !== void 0) {
            const result = router_default[url]({ method: req.method, query: req.query, body: req.body });
            res.end(JSON.stringify(result));
          } else {
            res.end(JSON.stringify({ code: 400, msg: "\u8BF7\u6C42\u5931\u8D25" }));
          }
        } else {
          next();
        }
      });
    }
  };
};
function bodyParse() {
  return (req, res, next) => {
    let body;
    req.on("data", (chunk) => {
      body = chunk.toString();
    });
    req.on("end", () => {
      req.body = body;
      next();
    });
  };
}
function parseQuery(query) {
  if (!query)
    return {};
  return query.split("&").reduce((prev, item) => {
    const [key, value] = item.split("=");
    prev[key] = value;
    return prev;
  }, {});
}

// vite.config.js
var __vite_injected_original_import_meta_url = "file:///C:/Users/Administrator/Desktop/knowledge/admin1.0/admin/vite.config.js";
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    AutoImport({
      resolvers: [ElementPlusResolver()]
    }),
    Components({
      dirs: ["src/components"],
      resolvers: [ElementPlusResolver()]
    }),
    createSvgIconsPlugin({
      // eslint-disable-next-line no-undef
      iconDirs: [path.resolve(process.cwd(), "src/icons")],
      symbolId: "icon-[dir]-[name]"
    }),
    mock_default()
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  server: {
    proxy: {
      "/api": {
        target: "http://127.0.0.1:3000",
        changeOrigin: true,
        rewrite: (path2) => path2.replace(/^\/api/, "")
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
